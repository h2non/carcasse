Ext.data.JsonP.Carcass({"tagname":"class","name":"Carcass","mixins":[],"alternateClassNames":[],"members":{"cfg":[],"property":[],"method":[{"name":"createByAlias","tagname":"method","owner":"Carcass","meta":{},"id":"method-createByAlias"},{"name":"createWidget","tagname":"method","owner":"Carcass","meta":{"deprecated":{"version":"4.0.0","text":"Please use {@link Carcass#widget} instead."}},"id":"method-createWidget"},{"name":"decode","tagname":"method","owner":"Carcass","meta":{},"id":"method-decode"},{"name":"define","tagname":"method","owner":"Carcass","meta":{},"id":"method-define"},{"name":"encode","tagname":"method","owner":"Carcass","meta":{},"id":"method-encode"},{"name":"exclude","tagname":"method","owner":"Carcass","meta":{},"id":"method-exclude"},{"name":"getClass","tagname":"method","owner":"Carcass","meta":{},"id":"method-getClass"},{"name":"getClassName","tagname":"method","owner":"Carcass","meta":{},"id":"method-getClassName"},{"name":"getDisplayName","tagname":"method","owner":"Carcass","meta":{},"id":"method-getDisplayName"},{"name":"merge","tagname":"method","owner":"Carcass","meta":{},"id":"method-merge"},{"name":"namespace","tagname":"method","owner":"Carcass","meta":{},"id":"method-namespace"},{"name":"ns","tagname":"method","owner":"Carcass","meta":{},"id":"method-ns"},{"name":"num","tagname":"method","owner":"Carcass","meta":{"deprecated":{"version":"4.0.0","text":"Replaced by Carcasse.Number.from"}},"id":"method-num"},{"name":"onReady","tagname":"method","owner":"Carcass","meta":{},"id":"method-onReady"},{"name":"require","tagname":"method","owner":"Carcass","meta":{},"id":"method-require"},{"name":"syncRequire","tagname":"method","owner":"Carcass","meta":{},"id":"method-syncRequire"},{"name":"urlDecode","tagname":"method","owner":"Carcass","meta":{"deprecated":{"version":"4.0.0","text":"Please use {@link Carcasse.Object#fromQueryString Carcasse.Object.fromQueryString} instead"}},"id":"method-urlDecode"},{"name":"urlEncode","tagname":"method","owner":"Carcass","meta":{"deprecated":{"version":"4.0.0","text":"Please use `{@link Carcasse.Object#toQueryString Carcasse.Object.toQueryString}` instead"}},"id":"method-urlEncode"},{"name":"widget","tagname":"method","owner":"Carcass","meta":{},"id":"method-widget"}],"event":[],"css_var":[],"css_mixin":[]},"aliases":{},"meta":{},"files":[{"filename":"","href":""}],"html_meta":{},"statics":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><div class='doc-contents'>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-createByAlias' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcass'>Carcass</span><br/><a href='source/ClassManager.html#Carcass-method-createByAlias' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcass-method-createByAlias' class='name expandable'>createByAlias</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Convenient shorthand, see Carcasse.ClassManager.instantiateByAlias. ...</div><div class='long'><p>Convenient shorthand, see <a href=\"#!/api/Carcasse.ClassManager-method-instantiateByAlias\" rel=\"Carcasse.ClassManager-method-instantiateByAlias\" class=\"docClass\">Carcasse.ClassManager.instantiateByAlias</a>.</p>\n</div></div></div><div id='method-createWidget' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcass'>Carcass</span><br/><a href='source/ClassManager.html#Carcass-method-createWidget' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcass-method-createWidget' class='name expandable'>createWidget</a>( <span class='pre'></span> )<strong class='deprecated signature' >deprecated</strong></div><div class='description'><div class='short'>Old name for widget. ...</div><div class='long'><p>Old name for <a href=\"#!/api/Carcass-method-widget\" rel=\"Carcass-method-widget\" class=\"docClass\">widget</a>.</p>\n        <div class='signature-box deprecated'>\n        <p>This method has been <strong>deprecated</strong> since 4.0.0</p>\n        <p>Please use <a href=\"#!/api/Carcass-method-widget\" rel=\"Carcass-method-widget\" class=\"docClass\">widget</a> instead.</p>\n\n        </div>\n</div></div></div><div id='method-decode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcass'>Carcass</span><br/><a href='source/JSON.html#Carcass-method-decode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcass-method-decode' class='name expandable'>decode</a>( <span class='pre'>json, [safe]</span> ) : Object/null</div><div class='description'><div class='short'>Shorthand for Carcasse.JSON.decode. ...</div><div class='long'><p>Shorthand for <a href=\"#!/api/Carcasse.JSON-method-decode\" rel=\"Carcasse.JSON-method-decode\" class=\"docClass\">Carcasse.JSON.decode</a>.</p>\n\n<p>Decodes (parses) a JSON string to an object. If the JSON is invalid, this function throws a Error unless the safe option is set.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>json</span> : String<div class='sub-desc'><p>The JSON string.</p>\n\n</div></li><li><span class='pre'>safe</span> : Boolean (optional)<div class='sub-desc'><p>Whether to return <code>null</code> or throw an exception if the JSON is invalid.</p>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object/null</span><div class='sub-desc'><p>The resulting object.</p>\n\n</div></li></ul></div></div></div><div id='method-define' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcass'>Carcass</span><br/><a href='source/ClassManager.html#Carcass-method-define' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcass-method-define' class='name expandable'>define</a>( <span class='pre'>className, data, [createdFn]</span> ) : <a href=\"#!/api/Carcasse.Base\" rel=\"Carcasse.Base\" class=\"docClass\">Carcasse.Base</a></div><div class='description'><div class='short'>Defines a class or override. ...</div><div class='long'><p>Defines a class or override. A basic class is defined like this:</p>\n\n<pre><code> Carcasse.define('My.awesome.Class', {\n     someProperty: 'something',\n\n     someMethod: function(s) {\n         console.log(s + this.someProperty);\n     }\n });\n\n var obj = new My.awesome.Class();\n\n obj.someMethod('Say '); // logs 'Say something' to the console\n</code></pre>\n\n<p>To defines an override, include the <code>override</code> property. The content of an\noverride is aggregated with the specified class in order to extend or modify\nthat class. This can be as simple as setting default property values or it can\nextend and/or replace methods. This can also extend the statics of the class.</p>\n\n<p>One use for an override is to break a large class into manageable pieces.</p>\n\n<pre><code> // File: /src/app/Panel.js\n Carcasse.define('My.app.Panel', {\n     extend: 'Carcasse.panel.Panel',\n     requires: [\n         'My.app.PanelPart2',\n         'My.app.PanelPart3'\n     ],\n\n     constructor: function (config) {\n         this.callParent(arguments); // calls Carcasse.panel.Panel's constructor\n         // ...\n     },\n\n     statics: {\n         method: function () {\n             return 'abc';\n         }\n     }\n });\n\n // File: /src/app/PanelPart2.js\n Carcasse.define('My.app.PanelPart2', {\n     override: 'My.app.Panel',\n\n     constructor: function (config) {\n         this.callParent(arguments); // calls My.app.Panel's constructor\n         // ...\n     }\n });\n</code></pre>\n\n<p>Another use for an override is to provide optional parts of classes that can be\nindependently required. In this case, the class may even be unaware of the\noverride altogether.</p>\n\n<pre><code> Carcasse.define('My.ux.CoolTip', {\n     override: 'Carcasse.tip.ToolTip',\n\n     constructor: function (config) {\n         this.callParent(arguments); // calls Carcasse.tip.ToolTip's constructor\n         // ...\n     }\n });\n</code></pre>\n\n<p>The above override can now be required as normal.</p>\n\n<pre><code> Carcasse.define('My.app.App', {\n     requires: [\n         'My.ux.CoolTip'\n     ]\n });\n</code></pre>\n\n<p>Overrides can also contain statics:</p>\n\n<pre><code> Carcasse.define('My.app.BarMod', {\n     override: 'Carcasse.foo.Bar',\n\n     statics: {\n         method: function (x) {\n             return this.callParent([x * 2]); // call Carcasse.foo.Bar.method\n         }\n     }\n });\n</code></pre>\n\n<p><strong>IMPORTANT:</strong> An override is only included in a build if the class it overrides is\nrequired. Otherwise, the override, like the target class, is not included.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>className</span> : String<div class='sub-desc'><p>The class name to create in string dot-namespaced format, for example:\n'My.very.awesome.Class', 'FeedViewer.plugin.CoolPager'</p>\n\n<p>It is highly recommended to follow this simple convention:\n - The root and the class name are 'CamelCased'\n - Everything else is lower-cased</p>\n</div></li><li><span class='pre'>data</span> : Object<div class='sub-desc'><p>The key - value pairs of properties to apply to this class. Property names can be of\nany valid strings, except those in the reserved listed below:</p>\n\n<ul>\n<li><code>mixins</code></li>\n<li><code>statics</code></li>\n<li><code>config</code></li>\n<li><code>alias</code></li>\n<li><code>self</code></li>\n<li><code>singleton</code></li>\n<li><code>alternateClassName</code></li>\n<li><code>override</code></li>\n</ul>\n\n</div></li><li><span class='pre'>createdFn</span> : Function (optional)<div class='sub-desc'><p>Optional callback to execute after the class (or override)\nis created. The execution scope (<code>this</code>) will be the newly created class itself.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Carcasse.Base\" rel=\"Carcasse.Base\" class=\"docClass\">Carcasse.Base</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-encode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcass'>Carcass</span><br/><a href='source/JSON.html#Carcass-method-encode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcass-method-encode' class='name expandable'>encode</a>( <span class='pre'>o</span> ) : String</div><div class='description'><div class='short'>Shorthand for Carcasse.JSON.encode. ...</div><div class='long'><p>Shorthand for <a href=\"#!/api/Carcasse.JSON-method-encode\" rel=\"Carcasse.JSON-method-encode\" class=\"docClass\">Carcasse.JSON.encode</a>.</p>\n\n<p>Encodes an Object, Array or other value.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object<div class='sub-desc'><p>The variable to encode.</p>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The JSON string.</p>\n\n</div></li></ul></div></div></div><div id='method-exclude' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcass'>Carcass</span><br/><a href='source/Loader.html#Carcass-method-exclude' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcass-method-exclude' class='name expandable'>exclude</a>( <span class='pre'>excludes</span> ) : Object</div><div class='description'><div class='short'>Convenient shortcut to Carcasse.Loader.exclude. ...</div><div class='long'><p>Convenient shortcut to <a href=\"#!/api/Carcasse.Loader-method-exclude\" rel=\"Carcasse.Loader-method-exclude\" class=\"docClass\">Carcasse.Loader.exclude</a>.</p>\n\n<p>Explicitly exclude files from being loaded. Useful when used in conjunction with a broad include expression.\nCan be chained with more <code>require</code> and <code>exclude</code> methods, eg:</p>\n\n<pre><code>Carcasse.exclude('Carcasse.data.*').require('*');\n\nCarcasse.exclude('widget.button*').require('widget.*');\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>excludes</span> : Array<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>object contains <code>require</code> method for chaining.</p>\n\n</div></li></ul></div></div></div><div id='method-getClass' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcass'>Carcass</span><br/><a href='source/ClassManager.html#Carcass-method-getClass' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcass-method-getClass' class='name expandable'>getClass</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Convenient shorthand, see Carcasse.ClassManager.getClass. ...</div><div class='long'><p>Convenient shorthand, see <a href=\"#!/api/Carcasse.ClassManager-method-getClass\" rel=\"Carcasse.ClassManager-method-getClass\" class=\"docClass\">Carcasse.ClassManager.getClass</a>.</p>\n</div></div></div><div id='method-getClassName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcass'>Carcass</span><br/><a href='source/ClassManager.html#Carcass-method-getClassName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcass-method-getClassName' class='name expandable'>getClassName</a>( <span class='pre'>object</span> ) : String</div><div class='description'><div class='short'>Convenient shorthand for Carcasse.ClassManager.getName. ...</div><div class='long'><p>Convenient shorthand for <a href=\"#!/api/Carcasse.ClassManager-method-getName\" rel=\"Carcasse.ClassManager-method-getName\" class=\"docClass\">Carcasse.ClassManager.getName</a>.</p>\n\n<p>Get the name of the class by its reference or its instance;\nusually invoked by the shorthand <a href=\"#!/api/Carcass-method-getClassName\" rel=\"Carcass-method-getClassName\" class=\"docClass\">Carcasse.getClassName</a></p>\n\n<pre><code><a href=\"#!/api/Carcasse.ClassManager-method-getName\" rel=\"Carcasse.ClassManager-method-getName\" class=\"docClass\">Carcasse.ClassManager.getName</a>(Carcasse.Action); // returns \"Carcasse.Action\"\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : <a href=\"#!/api/Carcasse.Class\" rel=\"Carcasse.Class\" class=\"docClass\">Carcasse.Class</a>/Object<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>className</p>\n\n</div></li></ul></div></div></div><div id='method-getDisplayName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcass'>Carcass</span><br/><a href='source/ClassManager.html#Carcass-method-getDisplayName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcass-method-getDisplayName' class='name expandable'>getDisplayName</a>( <span class='pre'>[object]</span> ) : String</div><div class='description'><div class='short'>Returns the display name for object. ...</div><div class='long'><p>Returns the display name for object.  This name is looked for in order from the following places:</p>\n\n<ul>\n<li><code>displayName</code> field of the object.</li>\n<li><code>$name</code> and <code>$class</code> fields of the object.</li>\n<li>'$className` field of the object.</li>\n</ul>\n\n\n<p>This method is used by Carcasse.Logger.log to display information about objects.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Mixed (optional)<div class='sub-desc'><p>The object who's display name to determine.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The determined display name, or \"Anonymous\" if none found.</p>\n</div></li></ul></div></div></div><div id='method-merge' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcass'>Carcass</span><br/><a href='source/Object.html#Carcass-method-merge' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcass-method-merge' class='name expandable'>merge</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>A convenient alias method for Carcasse.Object.merge. ...</div><div class='long'><p>A convenient alias method for <a href=\"#!/api/Carcasse.Object-method-merge\" rel=\"Carcasse.Object-method-merge\" class=\"docClass\">Carcasse.Object.merge</a>.</p>\n</div></div></div><div id='method-namespace' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcass'>Carcass</span><br/><a href='source/ClassManager.html#Carcass-method-namespace' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcass-method-namespace' class='name expandable'>namespace</a>( <span class='pre'>namespace1, namespace2, etc</span> ) : Object</div><div class='description'><div class='short'>Creates namespaces to be used for scoping variables and classes so that they are not global. ...</div><div class='long'><p>Creates namespaces to be used for scoping variables and classes so that they are not global.\nSpecifying the last node of a namespace implicitly creates all other nodes. Usage:</p>\n\n<pre><code>Carcasse.namespace('Company', 'Company.data');\n\n // equivalent and preferable to the above syntax\nCarcasse.namespace('Company.data');\n\nCompany.Widget = function() {\n    // ...\n};\n\nCompany.data.CustomStore = function(config) {\n    // ...\n};\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>namespace1</span> : String<div class='sub-desc'>\n</div></li><li><span class='pre'>namespace2</span> : String<div class='sub-desc'>\n</div></li><li><span class='pre'>etc</span> : String<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>The namespace object. If multiple arguments are passed, this will be the last namespace created.</p>\n</div></li></ul></div></div></div><div id='method-ns' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcass'>Carcass</span><br/><a href='source/ClassManager.html#Carcass-method-ns' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcass-method-ns' class='name expandable'>ns</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Convenient alias for Carcasse.namespace. ...</div><div class='long'><p>Convenient alias for <a href=\"#!/api/Carcass-method-namespace\" rel=\"Carcass-method-namespace\" class=\"docClass\">Carcasse.namespace</a>.</p>\n</div></div></div><div id='method-num' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcass'>Carcass</span><br/><a href='source/Number.html#Carcass-method-num' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcass-method-num' class='name expandable'>num</a>( <span class='pre'></span> )<strong class='deprecated signature' >deprecated</strong></div><div class='description'><div class='short'>This method is deprecated, please use Carcasse.Number.from instead ...</div><div class='long'><p>This method is deprecated, please use <a href=\"#!/api/Carcasse.Number-method-from\" rel=\"Carcasse.Number-method-from\" class=\"docClass\">Carcasse.Number.from</a> instead</p>\n        <div class='signature-box deprecated'>\n        <p>This method has been <strong>deprecated</strong> since 4.0.0</p>\n        <p>Replaced by <a href=\"#!/api/Carcasse.Number-method-from\" rel=\"Carcasse.Number-method-from\" class=\"docClass\">Carcasse.Number.from</a></p>\n\n        </div>\n</div></div></div><div id='method-onReady' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcass'>Carcass</span><br/><a href='source/Loader.html#Carcass-method-onReady' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcass-method-onReady' class='name expandable'>onReady</a>( <span class='pre'>fn, [scope], [options]</span> )</div><div class='description'><div class='short'>Adds a listener to be notified when the document is ready and all dependencies are loaded. ...</div><div class='long'><p>Adds a listener to be notified when the document is ready and all dependencies are loaded.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Function<div class='sub-desc'><p>The method the event invokes.</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope in which the handler function executes. Defaults to the browser window.</p>\n</div></li><li><span class='pre'>options</span> : Boolean (optional)<div class='sub-desc'><p>Options object as passed to Carcasse.Element.addListener. It is recommended\nthat the options <code>{single: true}</code> be used so that the handler is removed on first invocation.</p>\n</div></li></ul></div></div></div><div id='method-require' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcass'>Carcass</span><br/><a href='source/Loader.html#Carcass-method-require' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcass-method-require' class='name expandable'>require</a>( <span class='pre'>expressions, [fn], [scope], [excludes]</span> )</div><div class='description'><div class='short'>Convenient alias of Carcasse.Loader.require. ...</div><div class='long'><p>Convenient alias of <a href=\"#!/api/Carcasse.Loader-method-require\" rel=\"Carcasse.Loader-method-require\" class=\"docClass\">Carcasse.Loader.require</a>. Please see the introduction documentation of\n<a href=\"#!/api/Carcasse.Loader\" rel=\"Carcasse.Loader\" class=\"docClass\">Carcasse.Loader</a> for examples.</p>\n\n<p>Loads all classes by the given names and all their direct dependencies; optionally executes the given callback function when\nfinishes, within the optional scope. This method is aliased by <a href=\"#!/api/Carcass-method-require\" rel=\"Carcass-method-require\" class=\"docClass\">Carcasse.require</a> for convenience.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>expressions</span> : String/Array<div class='sub-desc'><p>Can either be a string or an array of string.</p>\n\n</div></li><li><span class='pre'>fn</span> : Function (optional)<div class='sub-desc'><p>The callback function.</p>\n\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The execution scope (<code>this</code>) of the callback function.</p>\n\n</div></li><li><span class='pre'>excludes</span> : String/Array (optional)<div class='sub-desc'><p>Classes to be excluded, useful when being used with expressions.</p>\n\n</div></li></ul></div></div></div><div id='method-syncRequire' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcass'>Carcass</span><br/><a href='source/Loader.html#Carcass-method-syncRequire' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcass-method-syncRequire' class='name expandable'>syncRequire</a>( <span class='pre'>expressions, [fn], [scope], [excludes]</span> )</div><div class='description'><div class='short'>Synchronous version of require, convenient alias of Carcasse.Loader.syncRequire. ...</div><div class='long'><p>Synchronous version of <a href=\"#!/api/Carcass-method-require\" rel=\"Carcass-method-require\" class=\"docClass\">require</a>, convenient alias of <a href=\"#!/api/Carcasse.Loader-method-syncRequire\" rel=\"Carcasse.Loader-method-syncRequire\" class=\"docClass\">Carcasse.Loader.syncRequire</a>.</p>\n\n<p>Synchronously loads all classes by the given names and all their direct dependencies; optionally executes the given callback function when finishes, within the optional scope. This method is aliased by <a href=\"#!/api/Carcass-method-syncRequire\" rel=\"Carcass-method-syncRequire\" class=\"docClass\">syncRequire</a> for convenience</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>expressions</span> : String/Array<div class='sub-desc'><p>Can either be a string or an array of string</p>\n\n</div></li><li><span class='pre'>fn</span> : Function (optional)<div class='sub-desc'><p>The callback function</p>\n\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The execution scope (<code>this</code>) of the callback function</p>\n\n</div></li><li><span class='pre'>excludes</span> : String/Array (optional)<div class='sub-desc'><p>Classes to be excluded, useful when being used with expressions</p>\n\n</div></li></ul></div></div></div><div id='method-urlDecode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcass'>Carcass</span><br/><a href='source/Object.html#Carcass-method-urlDecode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcass-method-urlDecode' class='name expandable'>urlDecode</a>( <span class='pre'></span> )<strong class='deprecated signature' >deprecated</strong></div><div class='description'><div class='short'>A convenient alias method for Carcasse.Object.fromQueryString. ...</div><div class='long'><p>A convenient alias method for <a href=\"#!/api/Carcasse.Object-method-fromQueryString\" rel=\"Carcasse.Object-method-fromQueryString\" class=\"docClass\">Carcasse.Object.fromQueryString</a>.</p>\n        <div class='signature-box deprecated'>\n        <p>This method has been <strong>deprecated</strong> since 4.0.0</p>\n        <p>Please use <a href=\"#!/api/Carcasse.Object-method-fromQueryString\" rel=\"Carcasse.Object-method-fromQueryString\" class=\"docClass\">Carcasse.Object.fromQueryString</a> instead</p>\n\n        </div>\n</div></div></div><div id='method-urlEncode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcass'>Carcass</span><br/><a href='source/Object.html#Carcass-method-urlEncode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcass-method-urlEncode' class='name expandable'>urlEncode</a>( <span class='pre'></span> )<strong class='deprecated signature' >deprecated</strong></div><div class='description'><div class='short'>A convenient alias method for Carcasse.Object.toQueryString. ...</div><div class='long'><p>A convenient alias method for <a href=\"#!/api/Carcasse.Object-method-toQueryString\" rel=\"Carcasse.Object-method-toQueryString\" class=\"docClass\">Carcasse.Object.toQueryString</a>.</p>\n        <div class='signature-box deprecated'>\n        <p>This method has been <strong>deprecated</strong> since 4.0.0</p>\n        <p>Please use <code><a href=\"#!/api/Carcasse.Object-method-toQueryString\" rel=\"Carcasse.Object-method-toQueryString\" class=\"docClass\">Carcasse.Object.toQueryString</a></code> instead</p>\n\n        </div>\n</div></div></div><div id='method-widget' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcass'>Carcass</span><br/><a href='source/ClassManager.html#Carcass-method-widget' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcass-method-widget' class='name expandable'>widget</a>( <span class='pre'>name</span> )</div><div class='description'><div class='short'>Convenient shorthand to create a widget by its xtype, also see Carcasse.ClassManager.instantiateByAlias\n\nvar button =...</div><div class='long'><p>Convenient shorthand to create a widget by its xtype, also see <a href=\"#!/api/Carcasse.ClassManager-method-instantiateByAlias\" rel=\"Carcasse.ClassManager-method-instantiateByAlias\" class=\"docClass\">Carcasse.ClassManager.instantiateByAlias</a></p>\n\n<pre><code>var button = Carcasse.widget('button'); // Equivalent to Carcasse.create('widget.button')\nvar panel = Carcasse.widget('panel'); // Equivalent to Carcasse.create('widget.panel')\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : Object<div class='sub-desc'>\n</div></li></ul></div></div></div></div></div></div></div>"});