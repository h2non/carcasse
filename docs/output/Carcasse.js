Ext.data.JsonP.Carcasse({"tagname":"class","name":"Carcasse","extends":null,"mixins":[],"alternateClassNames":[],"aliases":{},"singleton":true,"requires":[],"uses":[],"enum":null,"override":null,"inheritable":null,"inheritdoc":null,"meta":{},"private":null,"id":"class-Carcasse","members":{"cfg":[],"property":[{"name":"Logger","tagname":"property","owner":"Carcasse","meta":{"private":true},"id":"property-Logger"},{"name":"emptyFn","tagname":"property","owner":"Carcasse","meta":{},"id":"property-emptyFn"},{"name":"enumerables","tagname":"property","owner":"Carcasse","meta":{},"id":"property-enumerables"},{"name":"globalEval","tagname":"property","owner":"Carcasse","meta":{"private":true},"id":"property-globalEval"}],"method":[{"name":"apply","tagname":"method","owner":"Carcasse","meta":{},"id":"method-apply"},{"name":"applyIf","tagname":"method","owner":"Carcasse","meta":{},"id":"method-applyIf"},{"name":"bind","tagname":"method","owner":"Carcasse","meta":{},"id":"method-bind"},{"name":"clone","tagname":"method","owner":"Carcasse","meta":{},"id":"method-clone"},{"name":"defer","tagname":"method","owner":"Carcasse","meta":{},"id":"method-defer"},{"name":"each","tagname":"method","owner":"Carcasse","meta":{},"id":"method-each"},{"name":"extend","tagname":"method","owner":"Carcasse","meta":{"deprecated":{"version":"4.0.0","text":"Please use {@link Carcasse#define Carcasse.define} instead"}},"id":"method-extend"},{"name":"functionFactory","tagname":"method","owner":"Carcasse","meta":{"private":true},"id":"method-functionFactory"},{"name":"getUniqueGlobalNamespace","tagname":"method","owner":"Carcasse","meta":{"private":true},"id":"method-getUniqueGlobalNamespace"},{"name":"isArray","tagname":"method","owner":"Carcasse","meta":{},"id":"method-isArray"},{"name":"isBoolean","tagname":"method","owner":"Carcasse","meta":{},"id":"method-isBoolean"},{"name":"isDate","tagname":"method","owner":"Carcasse","meta":{},"id":"method-isDate"},{"name":"isDefined","tagname":"method","owner":"Carcasse","meta":{},"id":"method-isDefined"},{"name":"isElement","tagname":"method","owner":"Carcasse","meta":{},"id":"method-isElement"},{"name":"isEmpty","tagname":"method","owner":"Carcasse","meta":{},"id":"method-isEmpty"},{"name":"isFunction","tagname":"method","owner":"Carcasse","meta":{},"id":"method-isFunction"},{"name":"isIterable","tagname":"method","owner":"Carcasse","meta":{},"id":"method-isIterable"},{"name":"isNumber","tagname":"method","owner":"Carcasse","meta":{},"id":"method-isNumber"},{"name":"isNumeric","tagname":"method","owner":"Carcasse","meta":{},"id":"method-isNumeric"},{"name":"isObject","tagname":"method","owner":"Carcasse","meta":{},"id":"method-isObject"},{"name":"isPrimitive","tagname":"method","owner":"Carcasse","meta":{},"id":"method-isPrimitive"},{"name":"isSimpleObject","tagname":"method","owner":"Carcasse","meta":{"private":true},"id":"method-isSimpleObject"},{"name":"isString","tagname":"method","owner":"Carcasse","meta":{},"id":"method-isString"},{"name":"isTextNode","tagname":"method","owner":"Carcasse","meta":{},"id":"method-isTextNode"},{"name":"iterate","tagname":"method","owner":"Carcasse","meta":{},"id":"method-iterate"},{"name":"override","tagname":"method","owner":"Carcasse","meta":{"deprecated":{"version":"4.1.0","text":"Please use {@link Carcasse#define Carcasse.define} instead."}},"id":"method-override"},{"name":"pass","tagname":"method","owner":"Carcasse","meta":{},"id":"method-pass"},{"name":"toArray","tagname":"method","owner":"Carcasse","meta":{},"id":"method-toArray"},{"name":"typeOf","tagname":"method","owner":"Carcasse","meta":{},"id":"method-typeOf"},{"name":"valueFrom","tagname":"method","owner":"Carcasse","meta":{},"id":"method-valueFrom"}],"event":[],"css_var":[],"css_mixin":[]},"linenr":8,"files":[{"filename":"Carcass.js","href":"Carcass.html#Carcasse"}],"html_meta":{},"statics":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Carcass.html#Carcasse' target='_blank'>Carcass.js</a></div></pre><div class='doc-contents'>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-Logger' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-property-Logger' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-property-Logger' class='name not-expandable'>Logger</a><span> : Object</span><strong class='private signature' >private</strong></div><div class='description'><div class='short'>\n</div><div class='long'>\n</div></div></div><div id='property-emptyFn' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-property-emptyFn' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-property-emptyFn' class='name not-expandable'>emptyFn</a><span> : Object</span></div><div class='description'><div class='short'><p>A reusable empty function</p>\n</div><div class='long'><p>A reusable empty function</p>\n</div></div></div><div id='property-enumerables' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-property-enumerables' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-property-enumerables' class='name not-expandable'>enumerables</a><span> : String[]</span></div><div class='description'><div class='short'><p>An array containing extra enumerables for old browsers.</p>\n</div><div class='long'><p>An array containing extra enumerables for old browsers.</p>\n</div></div></div><div id='property-globalEval' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-property-globalEval' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-property-globalEval' class='name not-expandable'>globalEval</a><span> : Object</span><strong class='private signature' >private</strong></div><div class='description'><div class='short'>\n</div><div class='long'>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-apply' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-apply' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-apply' class='name expandable'>apply</a>( <span class='pre'>object, config, [defaults]</span> ) : Object</div><div class='description'><div class='short'>Copies all the properties of config to the specified object. ...</div><div class='long'><p>Copies all the properties of config to the specified object.\nNote that if recursive merging and cloning without referencing the original objects / arrays is needed, use\n<a href=\"#!/api/Carcasse.Object-method-merge\" rel=\"Carcasse.Object-method-merge\" class=\"docClass\">Carcasse.Object.merge</a> instead.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object<div class='sub-desc'><p>The receiver of the properties.</p>\n\n</div></li><li><span class='pre'>config</span> : Object<div class='sub-desc'><p>The source of the properties.</p>\n\n</div></li><li><span class='pre'>defaults</span> : Object (optional)<div class='sub-desc'><p>A different object that will also be applied for default values.</p>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>returns obj</p>\n\n</div></li></ul></div></div></div><div id='method-applyIf' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-applyIf' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-applyIf' class='name expandable'>applyIf</a>( <span class='pre'>object, config</span> ) : Object</div><div class='description'><div class='short'>Copies all the properties of config to object if they don't already exist. ...</div><div class='long'><p>Copies all the properties of config to object if they don't already exist.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object<div class='sub-desc'><p>The receiver of the properties.</p>\n</div></li><li><span class='pre'>config</span> : Object<div class='sub-desc'><p>The source of the properties.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>returns obj</p>\n</div></li></ul></div></div></div><div id='method-bind' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Function.html#Carcasse-method-bind' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-bind' class='name expandable'>bind</a>( <span class='pre'>fn, [scope], [args], [appendArgs]</span> ) : Function</div><div class='description'><div class='short'>Create a new function from the provided fn, change this to the provided scope, optionally\noverrides arguments for the...</div><div class='long'><p>Create a new function from the provided <code>fn</code>, change <code>this</code> to the provided scope, optionally\noverrides arguments for the call. Defaults to the arguments passed by the caller.</p>\n\n<p>Carcasse.bind is alias for <a href=\"#!/api/Carcasse.Function-method-bind\" rel=\"Carcasse.Function-method-bind\" class=\"docClass\">Carcasse.Function.bind</a></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Function<div class='sub-desc'><p>The function to delegate.</p>\n\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope (<code>this</code> reference) in which the function is executed.\n<strong>If omitted, defaults to the browser window.</strong></p>\n\n</div></li><li><span class='pre'>args</span> : Array (optional)<div class='sub-desc'><p>Overrides arguments for the call. (Defaults to the arguments passed by the caller)</p>\n\n</div></li><li><span class='pre'>appendArgs</span> : Boolean/Number (optional)<div class='sub-desc'><p>if <code>true</code> args are appended to call args instead of overriding,\nif a number the args are inserted at the specified position.</p>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>The new function.</p>\n\n</div></li></ul></div></div></div><div id='method-clone' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-clone' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-clone' class='name expandable'>clone</a>( <span class='pre'>item</span> ) : Object</div><div class='description'><div class='short'>Clone almost any type of variable including array, object, DOM nodes and Date without keeping the old reference. ...</div><div class='long'><p>Clone almost any type of variable including array, object, DOM nodes and Date without keeping the old reference.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>item</span> : Object<div class='sub-desc'><p>The variable to clone.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>clone</p>\n</div></li></ul></div></div></div><div id='method-defer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Function.html#Carcasse-method-defer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-defer' class='name expandable'>defer</a>( <span class='pre'>fn, millis, [scope], [args], [appendArgs]</span> ) : Number</div><div class='description'><div class='short'>Calls this function after the number of milliseconds specified, optionally in a specific scope. ...</div><div class='long'><p>Calls this function after the number of milliseconds specified, optionally in a specific scope. Example usage:</p>\n\n<pre><code>var sayHi = function(name){\n    alert('Hi, ' + name);\n};\n\n// executes immediately:\nsayHi('Fred');\n\n// executes after 2 seconds:\n<a href=\"#!/api/Carcasse.Function-method-defer\" rel=\"Carcasse.Function-method-defer\" class=\"docClass\">Carcasse.Function.defer</a>(sayHi, 2000, this, ['Fred']);\n\n// this syntax is sometimes useful for deferring\n// execution of an anonymous function:\n<a href=\"#!/api/Carcasse.Function-method-defer\" rel=\"Carcasse.Function-method-defer\" class=\"docClass\">Carcasse.Function.defer</a>(function(){\n    alert('Anonymous');\n}, 100);\n</code></pre>\n\n<p>Carcasse.defer is alias for <a href=\"#!/api/Carcasse.Function-method-defer\" rel=\"Carcasse.Function-method-defer\" class=\"docClass\">Carcasse.Function.defer</a></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Function<div class='sub-desc'><p>The function to defer.</p>\n\n</div></li><li><span class='pre'>millis</span> : Number<div class='sub-desc'><p>The number of milliseconds for the <code>setTimeout()</code> call.\nIf less than or equal to 0 the function is executed immediately.</p>\n\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope (<code>this</code> reference) in which the function is executed.\nIf omitted, defaults to the browser window.</p>\n\n</div></li><li><span class='pre'>args</span> : Array (optional)<div class='sub-desc'><p>Overrides arguments for the call. Defaults to the arguments passed by the caller.</p>\n\n</div></li><li><span class='pre'>appendArgs</span> : Boolean/Number (optional)<div class='sub-desc'><p>if <code>true</code>, args are appended to call args instead of overriding,\nif a number the args are inserted at the specified position.</p>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The timeout id that can be used with <code>clearTimeout()</code>.</p>\n\n</div></li></ul></div></div></div><div id='method-each' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Array.html#Carcasse-method-each' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-each' class='name expandable'>each</a>( <span class='pre'>iterable, fn, [scope], [reverse]</span> ) : Boolean</div><div class='description'><div class='short'>Iterates an array or an iterable value and invoke the given callback function for each item. ...</div><div class='long'><p>Iterates an array or an iterable value and invoke the given callback function for each item.</p>\n\n<pre><code>var countries = ['Vietnam', 'Singapore', 'United States', 'Russia'];\n\n<a href=\"#!/api/Carcasse.Array-method-each\" rel=\"Carcasse.Array-method-each\" class=\"docClass\">Carcasse.Array.each</a>(countries, function(name, index, countriesItSelf) {\n    console.log(name);\n});\n\nvar sum = function() {\n    var sum = 0;\n\n    <a href=\"#!/api/Carcasse.Array-method-each\" rel=\"Carcasse.Array-method-each\" class=\"docClass\">Carcasse.Array.each</a>(arguments, function(value) {\n        sum += value;\n    });\n\n    return sum;\n};\n\nsum(1, 2, 3); // returns 6\n</code></pre>\n\n<p>The iteration can be stopped by returning false in the function callback.</p>\n\n<pre><code><a href=\"#!/api/Carcasse.Array-method-each\" rel=\"Carcasse.Array-method-each\" class=\"docClass\">Carcasse.Array.each</a>(countries, function(name, index, countriesItSelf) {\n    if (name === 'Singapore') {\n        return false; // break here\n    }\n});\n</code></pre>\n\n<p><a href=\"#!/api/Carcasse-method-each\" rel=\"Carcasse-method-each\" class=\"docClass\">Carcasse.each</a> is alias for <a href=\"#!/api/Carcasse.Array-method-each\" rel=\"Carcasse.Array-method-each\" class=\"docClass\">Carcasse.Array.each</a></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>iterable</span> : Array/NodeList/Object<div class='sub-desc'><p>The value to be iterated. If this\nargument is not iterable, the callback function is called once.</p>\n\n</div></li><li><span class='pre'>fn</span> : Function<div class='sub-desc'><p>The callback function. If it returns <code>false</code>, the iteration stops and this method returns\nthe current <code>index</code>.</p>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>item</span> : Object<div class='sub-desc'><p>The item at the current <code>index</code> in the passed <code>array</code></p>\n\n</div></li><li><span class='pre'>index</span> : Number<div class='sub-desc'><p>The current <code>index</code> within the <code>array</code></p>\n\n</div></li><li><span class='pre'>allItems</span> : Array<div class='sub-desc'><p>The <code>array</code> itself which was passed as the first argument</p>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Return false to stop iteration.</p>\n\n</div></li></ul></div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope (<code>this</code> reference) in which the specified function is executed.</p>\n\n</div></li><li><span class='pre'>reverse</span> : Boolean (optional)<div class='sub-desc'><p>Reverse the iteration order (loop from the end to the beginning).</p>\n\n<p>Defaults to: <code>false</code></p></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>See description for the <code>fn</code> parameter.</p>\n\n</div></li></ul></div></div></div><div id='method-extend' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-extend' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-extend' class='name expandable'>extend</a>( <span class='pre'>superclass, overrides</span> ) : Function<strong class='deprecated signature' >deprecated</strong></div><div class='description'><div class='short'>This method deprecated. ...</div><div class='long'><p>This method deprecated. Use Carcasse.define instead.</p>\n        <div class='signature-box deprecated'>\n        <p>This method has been <strong>deprecated</strong> since 4.0.0</p>\n        <p>Please use Carcasse.define instead</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>superclass</span> : Function<div class='sub-desc'>\n</div></li><li><span class='pre'>overrides</span> : Object<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>The subclass constructor from the <code>overrides</code> parameter, or a generated one if not provided.</p>\n</div></li></ul></div></div></div><div id='method-functionFactory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-functionFactory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-functionFactory' class='name expandable'>functionFactory</a>( <span class='pre'></span> )<strong class='private signature' >private</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-getUniqueGlobalNamespace' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-getUniqueGlobalNamespace' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-getUniqueGlobalNamespace' class='name expandable'>getUniqueGlobalNamespace</a>( <span class='pre'></span> )<strong class='private signature' >private</strong></div><div class='description'><div class='short'>Generate a unique reference of Carcasse in the global scope, useful for sandboxing. ...</div><div class='long'><p>Generate a unique reference of Carcasse in the global scope, useful for sandboxing.</p>\n</div></div></div><div id='method-isArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-isArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-isArray' class='name expandable'>isArray</a>( <span class='pre'>target</span> ) : Boolean</div><div class='description'><div class='short'>Returns true if the passed value is a JavaScript Array, false otherwise. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is a JavaScript Array, <code>false</code> otherwise.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>target</span> : Object<div class='sub-desc'><p>The target to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isBoolean' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-isBoolean' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-isBoolean' class='name expandable'>isBoolean</a>( <span class='pre'>value</span> ) : Boolean</div><div class='description'><div class='short'>Returns true if the passed value is a Boolean. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is a Boolean.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isDate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-isDate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-isDate' class='name expandable'>isDate</a>( <span class='pre'>object</span> ) : Boolean</div><div class='description'><div class='short'>Returns true if the passed value is a JavaScript Date object, false otherwise. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is a JavaScript Date object, <code>false</code> otherwise.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object<div class='sub-desc'><p>The object to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isDefined' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-isDefined' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-isDefined' class='name expandable'>isDefined</a>( <span class='pre'>value</span> ) : Boolean</div><div class='description'><div class='short'>Returns true if the passed value is defined. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is defined.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isElement' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-isElement' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-isElement' class='name expandable'>isElement</a>( <span class='pre'>value</span> ) : Boolean</div><div class='description'><div class='short'>Returns true if the passed value is an HTMLElement. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is an HTMLElement.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isEmpty' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-isEmpty' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-isEmpty' class='name expandable'>isEmpty</a>( <span class='pre'>value, [allowEmptyString]</span> ) : Boolean</div><div class='description'><div class='short'>Returns true if the passed value is empty, false otherwise. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is empty, <code>false</code> otherwise. The value is deemed to be empty if it is either:</p>\n\n<ul>\n<li><code>null</code></li>\n<li><code>undefined</code></li>\n<li>a zero-length array.</li>\n<li>a zero-length string (Unless the <code>allowEmptyString</code> parameter is set to <code>true</code>).</li>\n</ul>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test.</p>\n</div></li><li><span class='pre'>allowEmptyString</span> : Boolean (optional)<div class='sub-desc'><p><code>true</code> to allow empty strings.</p>\n<p>Defaults to: <code>false</code></p></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isFunction' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-isFunction' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-isFunction' class='name expandable'>isFunction</a>( <span class='pre'>value</span> ) : Boolean</div><div class='description'><div class='short'>Returns true if the passed value is a JavaScript Function, false otherwise. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is a JavaScript Function, <code>false</code> otherwise.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isIterable' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-isIterable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-isIterable' class='name expandable'>isIterable</a>( <span class='pre'>value</span> ) : Boolean</div><div class='description'><div class='short'>Returns true if the passed value is iterable, false otherwise. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is iterable, <code>false</code> otherwise.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isNumber' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-isNumber' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-isNumber' class='name expandable'>isNumber</a>( <span class='pre'>value</span> ) : Boolean</div><div class='description'><div class='short'>Returns true if the passed value is a number. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is a number. Returns <code>false</code> for non-finite numbers.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isNumeric' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-isNumeric' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-isNumeric' class='name expandable'>isNumeric</a>( <span class='pre'>value</span> ) : Boolean</div><div class='description'><div class='short'>Validates that a value is numeric. ...</div><div class='long'><p>Validates that a value is numeric.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>Examples: 1, '1', '2.34'</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><code>true</code> if numeric, <code>false</code> otherwise.</p>\n</div></li></ul></div></div></div><div id='method-isObject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-isObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-isObject' class='name expandable'>isObject</a>( <span class='pre'>value</span> ) : Boolean</div><div class='description'><div class='short'>Returns true if the passed value is a JavaScript Object, false otherwise. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is a JavaScript Object, <code>false</code> otherwise.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isPrimitive' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-isPrimitive' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-isPrimitive' class='name expandable'>isPrimitive</a>( <span class='pre'>value</span> ) : Boolean</div><div class='description'><div class='short'>Returns true if the passed value is a JavaScript 'primitive', a string, number or Boolean. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is a JavaScript 'primitive', a string, number or Boolean.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isSimpleObject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-isSimpleObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-isSimpleObject' class='name expandable'>isSimpleObject</a>( <span class='pre'>value</span> )<strong class='private signature' >private</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-isString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-isString' class='name expandable'>isString</a>( <span class='pre'>value</span> ) : Boolean</div><div class='description'><div class='short'>Returns true if the passed value is a string. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is a string.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isTextNode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-isTextNode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-isTextNode' class='name expandable'>isTextNode</a>( <span class='pre'>value</span> ) : Boolean</div><div class='description'><div class='short'>Returns true if the passed value is a TextNode. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is a TextNode.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-iterate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-iterate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-iterate' class='name expandable'>iterate</a>( <span class='pre'>object, fn, [scope]</span> )</div><div class='description'><div class='short'>Iterates either an array or an object. ...</div><div class='long'><p>Iterates either an array or an object. This method delegates to\n<a href=\"#!/api/Carcasse.Array-method-each\" rel=\"Carcasse.Array-method-each\" class=\"docClass\">Carcasse.Array.each</a> if the given value is iterable, and <a href=\"#!/api/Carcasse.Object-method-each\" rel=\"Carcasse.Object-method-each\" class=\"docClass\">Carcasse.Object.each</a> otherwise.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object/Array<div class='sub-desc'><p>The object or array to be iterated.</p>\n</div></li><li><span class='pre'>fn</span> : Function<div class='sub-desc'><p>The function to be called for each iteration. See and <a href=\"#!/api/Carcasse.Array-method-each\" rel=\"Carcasse.Array-method-each\" class=\"docClass\">Carcasse.Array.each</a> and\n<a href=\"#!/api/Carcasse.Object-method-each\" rel=\"Carcasse.Object-method-each\" class=\"docClass\">Carcasse.Object.each</a> for detailed lists of arguments passed to this function depending on the given object\ntype that is being iterated.</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope (<code>this</code> reference) in which the specified function is executed.\nDefaults to the object being iterated itself.</p>\n</div></li></ul></div></div></div><div id='method-override' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-override' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-override' class='name expandable'>override</a>( <span class='pre'>cls, overrides</span> )<strong class='deprecated signature' >deprecated</strong></div><div class='description'><div class='short'>Proxy to Carcasse.Base.override. ...</div><div class='long'><p>Proxy to <a href=\"#!/api/Carcasse.Base-static-method-override\" rel=\"Carcasse.Base-static-method-override\" class=\"docClass\">Carcasse.Base.override</a>. Please refer <a href=\"#!/api/Carcasse.Base-static-method-override\" rel=\"Carcasse.Base-static-method-override\" class=\"docClass\">Carcasse.Base.override</a> for further details.</p>\n        <div class='signature-box deprecated'>\n        <p>This method has been <strong>deprecated</strong> since 4.1.0</p>\n        <p>Please use Carcasse.define instead.</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cls</span> : Object<div class='sub-desc'><p>The class to override</p>\n</div></li><li><span class='pre'>overrides</span> : Object<div class='sub-desc'><p>The properties to add to <code>origClass</code>. This should be specified as an object literal\ncontaining one or more properties.</p>\n</div></li></ul></div></div></div><div id='method-pass' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Function.html#Carcasse-method-pass' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-pass' class='name expandable'>pass</a>( <span class='pre'>fn, args, [scope]</span> ) : Function</div><div class='description'><div class='short'>Create a new function from the provided fn, the arguments of which are pre-set to args. ...</div><div class='long'><p>Create a new function from the provided <code>fn</code>, the arguments of which are pre-set to <code>args</code>.\nNew arguments passed to the newly created callback when it's invoked are appended after the pre-set ones.\nThis is especially useful when creating callbacks.</p>\n\n<p>For example:</p>\n\n<pre><code>var originalFunction = function(){\n    alert(<a href=\"#!/api/Carcasse.Array-method-from\" rel=\"Carcasse.Array-method-from\" class=\"docClass\">Carcasse.Array.from</a>(arguments).join(' '));\n};\n\nvar callback = <a href=\"#!/api/Carcasse.Function-method-pass\" rel=\"Carcasse.Function-method-pass\" class=\"docClass\">Carcasse.Function.pass</a>(originalFunction, ['Hello', 'World']);\n\ncallback(); // alerts 'Hello World'\ncallback('by Me'); // alerts 'Hello World by Me'\n</code></pre>\n\n<p>Carcasse.pass is alias for <a href=\"#!/api/Carcasse.Function-method-pass\" rel=\"Carcasse.Function-method-pass\" class=\"docClass\">Carcasse.Function.pass</a></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Function<div class='sub-desc'><p>The original function.</p>\n\n</div></li><li><span class='pre'>args</span> : Array<div class='sub-desc'><p>The arguments to pass to new callback.</p>\n\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope (<code>this</code> reference) in which the function is executed.</p>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>The new callback function.</p>\n\n</div></li></ul></div></div></div><div id='method-toArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Array.html#Carcasse-method-toArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-toArray' class='name expandable'>toArray</a>( <span class='pre'>iterable, [start], [end]</span> ) : Array</div><div class='description'><div class='short'>Converts any iterable (numeric indices and a length property) into a true array. ...</div><div class='long'><p>Converts any iterable (numeric indices and a length property) into a true array.</p>\n\n<pre><code>function test() {\n    var args = <a href=\"#!/api/Carcasse.Array-method-toArray\" rel=\"Carcasse.Array-method-toArray\" class=\"docClass\">Carcasse.Array.toArray</a>(arguments),\n        fromSecondToLastArgs = <a href=\"#!/api/Carcasse.Array-method-toArray\" rel=\"Carcasse.Array-method-toArray\" class=\"docClass\">Carcasse.Array.toArray</a>(arguments, 1);\n\n    alert(args.join(' '));\n    alert(fromSecondToLastArgs.join(' '));\n}\n\ntest('just', 'testing', 'here'); // alerts 'just testing here';\n                                 // alerts 'testing here';\n\n<a href=\"#!/api/Carcasse.Array-method-toArray\" rel=\"Carcasse.Array-method-toArray\" class=\"docClass\">Carcasse.Array.toArray</a>(document.getElementsByTagName('div')); // will convert the NodeList into an array\n<a href=\"#!/api/Carcasse.Array-method-toArray\" rel=\"Carcasse.Array-method-toArray\" class=\"docClass\">Carcasse.Array.toArray</a>('splitted'); // returns ['s', 'p', 'l', 'i', 't', 't', 'e', 'd']\n<a href=\"#!/api/Carcasse.Array-method-toArray\" rel=\"Carcasse.Array-method-toArray\" class=\"docClass\">Carcasse.Array.toArray</a>('splitted', 0, 3); // returns ['s', 'p', 'l', 'i']\n</code></pre>\n\n<p><a href=\"#!/api/Carcasse-method-toArray\" rel=\"Carcasse-method-toArray\" class=\"docClass\">Carcasse.toArray</a> is alias for <a href=\"#!/api/Carcasse.Array-method-toArray\" rel=\"Carcasse.Array-method-toArray\" class=\"docClass\">Carcasse.Array.toArray</a></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>iterable</span> : Object<div class='sub-desc'><p>the iterable object to be turned into a true Array.</p>\n\n</div></li><li><span class='pre'>start</span> : Number (optional)<div class='sub-desc'><p>a zero-based index that specifies the start of extraction.</p>\n\n<p>Defaults to: <code>0</code></p></div></li><li><span class='pre'>end</span> : Number (optional)<div class='sub-desc'><p>a zero-based index that specifies the end of extraction.</p>\n\n<p>Defaults to: <code>-1</code></p></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Array</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-typeOf' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-typeOf' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-typeOf' class='name expandable'>typeOf</a>( <span class='pre'>value</span> ) : String</div><div class='description'><div class='short'>Returns the type of the given variable in string format. ...</div><div class='long'><p>Returns the type of the given variable in string format. List of possible values are:</p>\n\n<ul>\n<li><code>undefined</code>: If the given value is <code>undefined</code></li>\n<li><code>null</code>: If the given value is <code>null</code></li>\n<li><code>string</code>: If the given value is a string</li>\n<li><code>number</code>: If the given value is a number</li>\n<li><code>boolean</code>: If the given value is a boolean value</li>\n<li><code>date</code>: If the given value is a <code>Date</code> object</li>\n<li><code>function</code>: If the given value is a function reference</li>\n<li><code>object</code>: If the given value is an object</li>\n<li><code>array</code>: If the given value is an array</li>\n<li><code>regexp</code>: If the given value is a regular expression</li>\n<li><code>element</code>: If the given value is a DOM Element</li>\n<li><code>textnode</code>: If the given value is a DOM text node and contains something other than whitespace</li>\n<li><code>whitespace</code>: If the given value is a DOM text node and contains only whitespace</li>\n</ul>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-valueFrom' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse'>Carcasse</span><br/><a href='source/Carcass.html#Carcasse-method-valueFrom' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse-method-valueFrom' class='name expandable'>valueFrom</a>( <span class='pre'>value, defaultValue, [allowBlank]</span> ) : Object</div><div class='description'><div class='short'>Returns the given value itself if it's not empty, as described in isEmpty; returns the default\nvalue (second argument...</div><div class='long'><p>Returns the given value itself if it's not empty, as described in <a href=\"#!/api/Carcasse-method-isEmpty\" rel=\"Carcasse-method-isEmpty\" class=\"docClass\">isEmpty</a>; returns the default\nvalue (second argument) otherwise.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test.</p>\n</div></li><li><span class='pre'>defaultValue</span> : Object<div class='sub-desc'><p>The value to return if the original value is empty.</p>\n</div></li><li><span class='pre'>allowBlank</span> : Boolean (optional)<div class='sub-desc'><p><code>true</code> to allow zero length strings to qualify as non-empty.</p>\n<p>Defaults to: <code>false</code></p></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p><code>value</code>, if non-empty, else <code>defaultValue</code>.</p>\n</div></li></ul></div></div></div></div></div></div></div>"});