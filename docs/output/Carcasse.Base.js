Ext.data.JsonP.Carcasse_Base({"tagname":"class","name":"Carcasse.Base","extends":null,"mixins":[],"alternateClassNames":[],"aliases":{},"singleton":false,"requires":[],"uses":[],"enum":null,"override":null,"inheritable":null,"inheritdoc":null,"meta":{"author":["Jacky Nguyen <jacky@sencha.com>"],"aside":[{"type":"guide","name":"class_system"},{"type":"video","name":"class-system"}]},"private":null,"id":"class-Carcasse.Base","members":{"cfg":[],"property":[{"name":"self","tagname":"property","owner":"Carcasse.Base","meta":{"protected":true},"id":"property-self"}],"method":[{"name":"callOverridden","tagname":"method","owner":"Carcasse.Base","meta":{"protected":true,"deprecated":{"text":"Use callParent instead"}},"id":"method-callOverridden"},{"name":"callParent","tagname":"method","owner":"Carcasse.Base","meta":{"protected":true},"id":"method-callParent"},{"name":"callSuper","tagname":"method","owner":"Carcasse.Base","meta":{"protected":true},"id":"method-callSuper"},{"name":"destroy","tagname":"method","owner":"Carcasse.Base","meta":{"protected":true},"id":"method-destroy"},{"name":"getConfig","tagname":"method","owner":"Carcasse.Base","meta":{"private":true},"id":"method-getConfig"},{"name":"getCurrentConfig","tagname":"method","owner":"Carcasse.Base","meta":{"private":true},"id":"method-getCurrentConfig"},{"name":"getInitialConfig","tagname":"method","owner":"Carcasse.Base","meta":{},"id":"method-getInitialConfig"},{"name":"hasConfig","tagname":"method","owner":"Carcasse.Base","meta":{"private":true},"id":"method-hasConfig"},{"name":"initConfig","tagname":"method","owner":"Carcasse.Base","meta":{"protected":true,"chainable":true},"id":"method-initConfig"},{"name":"link","tagname":"method","owner":"Carcasse.Base","meta":{"private":true},"id":"method-link"},{"name":"onConfigUpdate","tagname":"method","owner":"Carcasse.Base","meta":{"private":true},"id":"method-onConfigUpdate"},{"name":"setConfig","tagname":"method","owner":"Carcasse.Base","meta":{"private":true,"chainable":true},"id":"method-setConfig"},{"name":"statics","tagname":"method","owner":"Carcasse.Base","meta":{"protected":true},"id":"method-statics"},{"name":"unlink","tagname":"method","owner":"Carcasse.Base","meta":{"private":true,"chainable":true},"id":"method-unlink"}],"event":[],"css_var":[],"css_mixin":[]},"linenr":7,"files":[{"filename":"Base.js","href":"Base.html#Carcasse-Base"}],"html_meta":{"author":null,"aside":[]},"statics":{"cfg":[],"property":[{"name":"$onCarcasseended","tagname":"property","owner":"Carcasse.Base","meta":{"private":true,"static":true},"id":"static-property-S-onCarcasseended"}],"method":[{"name":"addConfig","tagname":"method","owner":"Carcasse.Base","meta":{"private":true,"static":true},"id":"static-method-addConfig"},{"name":"addInheritableStatics","tagname":"method","owner":"Carcasse.Base","meta":{"private":true,"static":true,"chainable":true},"id":"static-method-addInheritableStatics"},{"name":"addMember","tagname":"method","owner":"Carcasse.Base","meta":{"private":true,"static":true,"chainable":true},"id":"static-method-addMember"},{"name":"addMembers","tagname":"method","owner":"Carcasse.Base","meta":{"static":true,"chainable":true},"id":"static-method-addMembers"},{"name":"addStatics","tagname":"method","owner":"Carcasse.Base","meta":{"static":true,"chainable":true},"id":"static-method-addStatics"},{"name":"addXtype","tagname":"method","owner":"Carcasse.Base","meta":{"private":true,"static":true,"chainable":true},"id":"static-method-addXtype"},{"name":"borrow","tagname":"method","owner":"Carcasse.Base","meta":{"static":true,"private":true,"chainable":true},"id":"static-method-borrow"},{"name":"callParent","tagname":"method","owner":"Carcasse.Base","meta":{"protected":true,"static":true},"id":"static-method-callParent"},{"name":"create","tagname":"method","owner":"Carcasse.Base","meta":{"static":true},"id":"static-method-create"},{"name":"createAlias","tagname":"method","owner":"Carcasse.Base","meta":{"static":true},"id":"static-method-createAlias"},{"name":"extend","tagname":"method","owner":"Carcasse.Base","meta":{"private":true,"static":true},"id":"static-method-extend"},{"name":"getName","tagname":"method","owner":"Carcasse.Base","meta":{"static":true},"id":"static-method-getName"},{"name":"implement","tagname":"method","owner":"Carcasse.Base","meta":{"private":true,"static":true},"id":"static-method-implement"},{"name":"mixin","tagname":"method","owner":"Carcasse.Base","meta":{"private":true,"static":true},"id":"static-method-mixin"},{"name":"onCarcasseended","tagname":"method","owner":"Carcasse.Base","meta":{"private":true,"static":true,"chainable":true},"id":"static-method-onCarcasseended"},{"name":"override","tagname":"method","owner":"Carcasse.Base","meta":{"static":true,"deprecated":{"version":"2.1.0","text":"Please use {@link Carcasse#define Carcasse.define} instead"},"chainable":true},"id":"static-method-override"},{"name":"triggerCarcasseended","tagname":"method","owner":"Carcasse.Base","meta":{"private":true,"static":true},"id":"static-method-triggerCarcasseended"}],"event":[],"css_var":[],"css_mixin":[]},"component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Base.html#Carcasse-Base' target='_blank'>Base.js</a></div></pre><div class='doc-contents'><p>The root of all classes created with Carcasse.define.</p>\n\n<p><a href=\"#!/api/Carcasse.Base\" rel=\"Carcasse.Base\" class=\"docClass\">Carcasse.Base</a> is the building block of all Carcasse classes. All classes in Carcasse inherit from <a href=\"#!/api/Carcasse.Base\" rel=\"Carcasse.Base\" class=\"docClass\">Carcasse.Base</a>. All prototype and static\nmembers of this class are inherited by all other classes.</p>\n\n<p>See the <a href=\"#!/guide/class_system\">Class System Guide</a> for more.</p>\n</div><div class='members'><div class='members-section'><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Instance Properties</h3><div id='property-self' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-property-self' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-property-self' class='name expandable'>self</a><span> : <a href=\"#!/api/Carcasse.Class\" rel=\"Carcasse.Class\" class=\"docClass\">Carcasse.Class</a></span><strong class='protected signature' >protected</strong></div><div class='description'><div class='short'>Get the reference to the current class from which this object was instantiated. ...</div><div class='long'><p>Get the reference to the current class from which this object was instantiated. Unlike <a href=\"#!/api/Carcasse.Base-method-statics\" rel=\"Carcasse.Base-method-statics\" class=\"docClass\">statics</a>,\n<code>this.self</code> is scope-dependent and it's meant to be used for dynamic inheritance. See <a href=\"#!/api/Carcasse.Base-method-statics\" rel=\"Carcasse.Base-method-statics\" class=\"docClass\">statics</a>\nfor a detailed comparison</p>\n\n<pre><code>Carcasse.define('My.Cat', {\n    statics: {\n        speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n    },\n\n    constructor: function() {\n        alert(this.self.speciesName); // dependent on 'this'\n    },\n\n    clone: function() {\n        return new this.self();\n    }\n});\n\n\nCarcasse.define('My.SnowLeopard', {\n    extend: 'My.Cat',\n    statics: {\n        speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'\n    }\n});\n\nvar cat = new My.Cat();                     // alerts 'Cat'\nvar snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'\n\nvar clone = snowLeopard.clone();\nalert(Carcasse.getClassName(clone));             // alerts 'My.SnowLeopard'\n</code></pre>\n</div></div></div></div><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static Properties</h3><div id='static-property-S-onCarcasseended' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-static-property-S-onCarcasseended' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-static-property-S-onCarcasseended' class='name expandable'>$onCarcasseended</a><span> : Array</span><strong class='private signature' >private</strong><strong class='static signature' >static</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>[]</code></p></div></div></div></div></div><div class='members-section'><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Instance Methods</h3><div id='method-callOverridden' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-method-callOverridden' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-method-callOverridden' class='name expandable'>callOverridden</a>( <span class='pre'>args</span> ) : Object<strong class='deprecated signature' >deprecated</strong><strong class='protected signature' >protected</strong></div><div class='description'><div class='short'>Call the original method that was previously overridden with override,\n\nThis method is deprecated as callParent does ...</div><div class='long'><p>Call the original method that was previously overridden with <a href=\"#!/api/Carcasse.Base-static-method-override\" rel=\"Carcasse.Base-static-method-override\" class=\"docClass\">override</a>,</p>\n\n<p>This method is deprecated as <a href=\"#!/api/Carcasse.Base-method-callParent\" rel=\"Carcasse.Base-method-callParent\" class=\"docClass\">callParent</a> does the same thing.</p>\n\n<pre><code>Carcasse.define('My.Cat', {\n    constructor: function() {\n        alert(\"I'm a cat!\");\n    }\n});\n\nMy.Cat.override({\n    constructor: function() {\n        alert(\"I'm going to be a cat!\");\n\n        var instance = this.callOverridden();\n\n        alert(\"Meeeeoooowwww\");\n\n        return instance;\n    }\n});\n\nvar kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                          // alerts \"I'm a cat!\"\n                          // alerts \"Meeeeoooowwww\"\n</code></pre>\n        <div class='signature-box deprecated'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>Use callParent instead</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Array/Arguments<div class='sub-desc'><p>The arguments, either an array or the <code>arguments</code> object\nfrom the current method, for example: <code>this.callOverridden(arguments)</code></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>Returns the result of calling the overridden method</p>\n</div></li></ul></div></div></div><div id='method-callParent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-method-callParent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-method-callParent' class='name expandable'>callParent</a>( <span class='pre'>args</span> ) : Object<strong class='protected signature' >protected</strong></div><div class='description'><div class='short'>Call the \"parent\" method of the current method. ...</div><div class='long'><p>Call the \"parent\" method of the current method. That is the method previously\noverridden by derivation or by an override (see Carcasse.define).</p>\n\n<pre><code> Carcasse.define('My.Base', {\n     constructor: function (x) {\n         this.x = x;\n     },\n\n     statics: {\n         method: function (x) {\n             return x;\n         }\n     }\n });\n\n Carcasse.define('My.Derived', {\n     extend: 'My.Base',\n\n     constructor: function () {\n         this.callParent([21]);\n     }\n });\n\n var obj = new My.Derived();\n\n alert(obj.x);  // alerts 21\n</code></pre>\n\n<p>This can be used with an override as follows:</p>\n\n<pre><code> Carcasse.define('My.DerivedOverride', {\n     override: 'My.Derived',\n\n     constructor: function (x) {\n         this.callParent([x*2]); // calls original My.Derived constructor\n     }\n });\n\n var obj = new My.Derived();\n\n alert(obj.x);  // now alerts 42\n</code></pre>\n\n<p>This also works with static methods.</p>\n\n<pre><code> Carcasse.define('My.Derived2', {\n     extend: 'My.Base',\n\n     statics: {\n         method: function (x) {\n             return this.callParent([x*2]); // calls My.Base.method\n         }\n     }\n });\n\n alert(My.Base.method(10));     // alerts 10\n alert(My.Derived2.method(10)); // alerts 20\n</code></pre>\n\n<p>Lastly, it also works with overridden static methods.</p>\n\n<pre><code> Carcasse.define('My.Derived2Override', {\n     override: 'My.Derived2',\n\n     statics: {\n         method: function (x) {\n             return this.callParent([x*2]); // calls My.Derived2.method\n         }\n     }\n });\n\n alert(My.Derived2.method(10)); // now alerts 40\n</code></pre>\n\n<p>To override a method and replace it and also call the superclass method, use\n<a href=\"#!/api/Carcasse.Base-method-callSuper\" rel=\"Carcasse.Base-method-callSuper\" class=\"docClass\">callSuper</a>. This is often done to patch a method to fix a bug.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Array/Arguments<div class='sub-desc'><p>The arguments, either an array or the <code>arguments</code> object\nfrom the current method, for example: <code>this.callParent(arguments)</code></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>Returns the result of calling the parent method</p>\n</div></li></ul></div></div></div><div id='method-callSuper' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-method-callSuper' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-method-callSuper' class='name expandable'>callSuper</a>( <span class='pre'>args</span> ) : Object<strong class='protected signature' >protected</strong></div><div class='description'><div class='short'>This method is used by an override to call the superclass method but bypass any\noverridden method. ...</div><div class='long'><p>This method is used by an override to call the superclass method but bypass any\noverridden method. This is often done to \"patch\" a method that contains a bug\nbut for whatever reason cannot be fixed directly.</p>\n\n<p>Consider:</p>\n\n<pre><code> Carcasse.define('Carcasse.some.Class', {\n     method: function () {\n         console.log('Good');\n     }\n });\n\n Carcasse.define('Carcasse.some.DerivedClass', {\n     method: function () {\n         console.log('Bad');\n\n         // ... logic but with a bug ...\n\n         this.callParent();\n     }\n });\n</code></pre>\n\n<p>To patch the bug in <code>DerivedClass.method</code>, the typical solution is to create an\noverride:</p>\n\n<pre><code> Carcasse.define('App.paches.DerivedClass', {\n     override: 'Carcasse.some.DerivedClass',\n\n     method: function () {\n         console.log('Fixed');\n\n         // ... logic but with bug fixed ...\n\n         this.callSuper();\n     }\n });\n</code></pre>\n\n<p>The patch method cannot use <code>callParent</code> to call the superclass <code>method</code> since\nthat would call the overridden method containing the bug. In other words, the\nabove patch would only produce \"Fixed\" then \"Good\" in the console log, whereas,\nusing <code>callParent</code> would produce \"Fixed\" then \"Bad\" then \"Good\".</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Array/Arguments<div class='sub-desc'><p>The arguments, either an array or the <code>arguments</code> object\nfrom the current method, for example: <code>this.callSuper(arguments)</code></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>Returns the result of calling the superclass method</p>\n</div></li></ul></div></div></div><div id='method-destroy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-method-destroy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-method-destroy' class='name expandable'>destroy</a>( <span class='pre'></span> )<strong class='protected signature' >protected</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-getConfig' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-method-getConfig' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-method-getConfig' class='name expandable'>getConfig</a>( <span class='pre'>name</span> )<strong class='private signature' >private</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : Object<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-getCurrentConfig' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-method-getCurrentConfig' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-method-getCurrentConfig' class='name expandable'>getCurrentConfig</a>( <span class='pre'></span> )<strong class='private signature' >private</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-getInitialConfig' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-method-getInitialConfig' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-method-getInitialConfig' class='name expandable'>getInitialConfig</a>( <span class='pre'>[name]</span> ) : Object/Mixed</div><div class='description'><div class='short'>Returns the initial configuration passed to constructor. ...</div><div class='long'><p>Returns the initial configuration passed to constructor.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String (optional)<div class='sub-desc'><p>When supplied, value for particular configuration\noption is returned, otherwise the full config object is returned.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object/Mixed</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-hasConfig' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-method-hasConfig' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-method-hasConfig' class='name expandable'>hasConfig</a>( <span class='pre'>name</span> )<strong class='private signature' >private</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : Object<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-initConfig' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-method-initConfig' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-method-initConfig' class='name expandable'>initConfig</a>( <span class='pre'>instanceConfig</span> ) : Object<strong class='chainable signature' >chainable</strong><strong class='protected signature' >protected</strong></div><div class='description'><div class='short'>Initialize configuration for this class. ...</div><div class='long'><p>Initialize configuration for this class. a typical example:</p>\n\n<pre><code>Carcasse.define('My.awesome.Class', {\n    // The default config\n    config: {\n        name: 'Awesome',\n        isAwesome: true\n    },\n\n    constructor: function(config) {\n        this.initConfig(config);\n    }\n});\n\nvar awesome = new My.awesome.Class({\n    name: 'Super Awesome'\n});\n\nalert(awesome.getName()); // 'Super Awesome'\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>instanceConfig</span> : Object<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>mixins The mixin prototypes as key - value pairs</p>\n</div></li></ul></div></div></div><div id='method-link' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-method-link' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-method-link' class='name expandable'>link</a>( <span class='pre'>name, value</span> ) : Mixed<strong class='private signature' >private</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : Object<div class='sub-desc'>\n</div></li><li><span class='pre'>value</span> : Object<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Mixed</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-onConfigUpdate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-method-onConfigUpdate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-method-onConfigUpdate' class='name expandable'>onConfigUpdate</a>( <span class='pre'>names, callback, scope</span> )<strong class='private signature' >private</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>names</span> : Object<div class='sub-desc'>\n</div></li><li><span class='pre'>callback</span> : Object<div class='sub-desc'>\n</div></li><li><span class='pre'>scope</span> : Object<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-setConfig' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-method-setConfig' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-method-setConfig' class='name expandable'>setConfig</a>( <span class='pre'>config, applyIfNotSet</span> ) : <a href=\"#!/api/Carcasse.Base\" rel=\"Carcasse.Base\" class=\"docClass\">Carcasse.Base</a><strong class='chainable signature' >chainable</strong><strong class='private signature' >private</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>config</span> : Object<div class='sub-desc'>\n</div></li><li><span class='pre'>applyIfNotSet</span> : Object<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Carcasse.Base\" rel=\"Carcasse.Base\" class=\"docClass\">Carcasse.Base</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='method-statics' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-method-statics' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-method-statics' class='name expandable'>statics</a>( <span class='pre'></span> ) : <a href=\"#!/api/Carcasse.Class\" rel=\"Carcasse.Class\" class=\"docClass\">Carcasse.Class</a><strong class='protected signature' >protected</strong></div><div class='description'><div class='short'>Get the reference to the class from which this object was instantiated. ...</div><div class='long'><p>Get the reference to the class from which this object was instantiated. Note that unlike <a href=\"#!/api/Carcasse.Base-property-self\" rel=\"Carcasse.Base-property-self\" class=\"docClass\">self</a>,\n<code>this.statics()</code> is scope-independent and it always returns the class from which it was called, regardless of what\n<code>this</code> points to during run-time</p>\n\n<pre><code>Carcasse.define('My.Cat', {\n    statics: {\n        totalCreated: 0,\n        speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n    },\n\n    constructor: function() {\n        var statics = this.statics();\n\n        alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to\n                                        // equivalent to: My.Cat.speciesName\n\n        alert(this.self.speciesName);   // dependent on 'this'\n\n        statics.totalCreated++;\n    },\n\n    clone: function() {\n        var cloned = new this.self();                    // dependent on 'this'\n\n        cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName\n\n        return cloned;\n    }\n});\n\n\nCarcasse.define('My.SnowLeopard', {\n    extend: 'My.Cat',\n\n    statics: {\n        speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'\n    },\n\n    constructor: function() {\n        this.callParent();\n    }\n});\n\nvar cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'\n\nvar snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'\n\nvar clone = snowLeopard.clone();\nalert(Carcasse.getClassName(clone));         // alerts 'My.SnowLeopard'\nalert(clone.groupName);                 // alerts 'Cat'\n\nalert(My.Cat.totalCreated);             // alerts 3\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Carcasse.Class\" rel=\"Carcasse.Class\" class=\"docClass\">Carcasse.Class</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-unlink' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-method-unlink' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-method-unlink' class='name expandable'>unlink</a>( <span class='pre'></span> ) : <a href=\"#!/api/Carcasse.Base\" rel=\"Carcasse.Base\" class=\"docClass\">Carcasse.Base</a><strong class='chainable signature' >chainable</strong><strong class='private signature' >private</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Carcasse.Base\" rel=\"Carcasse.Base\" class=\"docClass\">Carcasse.Base</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div></div><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static Methods</h3><div id='static-method-addConfig' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-static-method-addConfig' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-static-method-addConfig' class='name expandable'>addConfig</a>( <span class='pre'>config, fullMerge</span> )<strong class='private signature' >private</strong><strong class='static signature' >static</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>config</span> : Object<div class='sub-desc'>\n</div></li><li><span class='pre'>fullMerge</span> : Object<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='static-method-addInheritableStatics' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-static-method-addInheritableStatics' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-static-method-addInheritableStatics' class='name expandable'>addInheritableStatics</a>( <span class='pre'>members</span> )<strong class='chainable signature' >chainable</strong><strong class='private signature' >private</strong><strong class='static signature' >static</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>members</span> : Object<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='static-method-addMember' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-static-method-addMember' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-static-method-addMember' class='name expandable'>addMember</a>( <span class='pre'>name, member</span> )<strong class='chainable signature' >chainable</strong><strong class='private signature' >private</strong><strong class='static signature' >static</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : Object<div class='sub-desc'>\n</div></li><li><span class='pre'>member</span> : Object<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='static-method-addMembers' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-static-method-addMembers' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-static-method-addMembers' class='name expandable'>addMembers</a>( <span class='pre'>members</span> )<strong class='chainable signature' >chainable</strong><strong class='static signature' >static</strong></div><div class='description'><div class='short'>Add methods / properties to the prototype of this class. ...</div><div class='long'><p>Add methods / properties to the prototype of this class.</p>\n\n<pre class='inline-example '><code>Carcasse.define('My.awesome.Cat', {\n    constructor: function() {\n        // ...\n    }\n});\n\n My.awesome.Cat.addMembers({\n     meow: function() {\n        alert('Meowww...');\n     }\n });\n\n var kitty = new My.awesome.Cat();\n kitty.meow();\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>members</span> : Object<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='static-method-addStatics' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-static-method-addStatics' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-static-method-addStatics' class='name expandable'>addStatics</a>( <span class='pre'>members</span> ) : <a href=\"#!/api/Carcasse.Base\" rel=\"Carcasse.Base\" class=\"docClass\">Carcasse.Base</a><strong class='chainable signature' >chainable</strong><strong class='static signature' >static</strong></div><div class='description'><div class='short'>Add / override static properties of this class. ...</div><div class='long'><p>Add / override static properties of this class.</p>\n\n<pre><code>Carcasse.define('My.cool.Class', {\n    // this.se\n});\n\nMy.cool.Class.addStatics({\n    someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'\n    method1: function() {  },    // My.cool.Class.method1 = function() { ... };\n    method2: function() {  }     // My.cool.Class.method2 = function() { ... };\n});\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>members</span> : Object<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Carcasse.Base\" rel=\"Carcasse.Base\" class=\"docClass\">Carcasse.Base</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='static-method-addXtype' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-static-method-addXtype' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-static-method-addXtype' class='name expandable'>addXtype</a>( <span class='pre'>xtype</span> )<strong class='chainable signature' >chainable</strong><strong class='private signature' >private</strong><strong class='static signature' >static</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>xtype</span> : Object<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='static-method-borrow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-static-method-borrow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-static-method-borrow' class='name expandable'>borrow</a>( <span class='pre'>fromClass, members</span> ) : <a href=\"#!/api/Carcasse.Base\" rel=\"Carcasse.Base\" class=\"docClass\">Carcasse.Base</a><strong class='chainable signature' >chainable</strong><strong class='private signature' >private</strong><strong class='static signature' >static</strong></div><div class='description'><div class='short'>Borrow another class' members to the prototype of this class. ...</div><div class='long'><p>Borrow another class' members to the prototype of this class.</p>\n\n<pre><code>Carcasse.define('Bank', {\n    money: '$$$',\n    printMoney: function() {\n        alert('$$$$$$$');\n    }\n});\n\nCarcasse.define('Thief', {\n    // ...\n});\n\nThief.borrow(Bank, ['money', 'printMoney']);\n\nvar steve = new Thief();\n\nalert(steve.money); // alerts '$$$'\nsteve.printMoney(); // alerts '$$$$$$$'\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fromClass</span> : <a href=\"#!/api/Carcasse.Base\" rel=\"Carcasse.Base\" class=\"docClass\">Carcasse.Base</a><div class='sub-desc'><p>The class to borrow members from</p>\n</div></li><li><span class='pre'>members</span> : Array/String<div class='sub-desc'><p>The names of the members to borrow</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Carcasse.Base\" rel=\"Carcasse.Base\" class=\"docClass\">Carcasse.Base</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='static-method-callParent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-static-method-callParent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-static-method-callParent' class='name expandable'>callParent</a>( <span class='pre'>args</span> )<strong class='protected signature' >protected</strong><strong class='static signature' >static</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='static-method-create' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-static-method-create' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-static-method-create' class='name expandable'>create</a>( <span class='pre'></span> ) : Object<strong class='static signature' >static</strong></div><div class='description'><div class='short'>Create a new instance of this Class. ...</div><div class='long'><p>Create a new instance of this Class.</p>\n\n<pre><code>Carcasse.define('My.cool.Class', {\n    // ...\n});\n\nMy.cool.Class.create({\n    someConfig: true\n});\n</code></pre>\n\n<p>All parameters are passed to the constructor of the class.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>the created instance.</p>\n</div></li></ul></div></div></div><div id='static-method-createAlias' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-static-method-createAlias' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-static-method-createAlias' class='name expandable'>createAlias</a>( <span class='pre'>alias, origin</span> )<strong class='static signature' >static</strong></div><div class='description'><div class='short'>Create aliases for existing prototype methods. ...</div><div class='long'><p>Create aliases for existing prototype methods. Example:</p>\n\n<pre><code>Carcasse.define('My.cool.Class', {\n    method1: function() {  },\n    method2: function() {  }\n});\n\nvar test = new My.cool.Class();\n\nMy.cool.Class.createAlias({\n    method3: 'method1',\n    method4: 'method2'\n});\n\ntest.method3(); // test.method1()\n\nMy.cool.Class.createAlias('method5', 'method3');\n\ntest.method5(); // test.method3() -&gt; test.method1()\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>alias</span> : String/Object<div class='sub-desc'><p>The new method name, or an object to set multiple aliases. See\n<a href=\"#!/api/Carcasse.Function-method-flexSetter\" rel=\"Carcasse.Function-method-flexSetter\" class=\"docClass\">flexSetter</a></p>\n</div></li><li><span class='pre'>origin</span> : String/Object<div class='sub-desc'><p>The original method name</p>\n</div></li></ul></div></div></div><div id='static-method-extend' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-static-method-extend' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-static-method-extend' class='name expandable'>extend</a>( <span class='pre'>parent</span> )<strong class='private signature' >private</strong><strong class='static signature' >static</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>parent</span> : Object<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='static-method-getName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-static-method-getName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-static-method-getName' class='name expandable'>getName</a>( <span class='pre'></span> ) : String<strong class='static signature' >static</strong></div><div class='description'><div class='short'>Get the current class' name in string format. ...</div><div class='long'><p>Get the current class' name in string format.</p>\n\n<pre><code>Carcasse.define('My.cool.Class', {\n    constructor: function() {\n        alert(this.self.getName()); // alerts 'My.cool.Class'\n    }\n});\n\nMy.cool.Class.getName(); // 'My.cool.Class'\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>className</p>\n</div></li></ul></div></div></div><div id='static-method-implement' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-static-method-implement' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-static-method-implement' class='name expandable'>implement</a>( <span class='pre'></span> )<strong class='private signature' >private</strong><strong class='static signature' >static</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='static-method-mixin' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-static-method-mixin' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-static-method-mixin' class='name expandable'>mixin</a>( <span class='pre'>name, mixinClass</span> )<strong class='private signature' >private</strong><strong class='static signature' >static</strong></div><div class='description'><div class='short'>Used internally by the mixins pre-processor ...</div><div class='long'><p>Used internally by the mixins pre-processor</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : Object<div class='sub-desc'>\n</div></li><li><span class='pre'>mixinClass</span> : Object<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='static-method-onCarcasseended' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-static-method-onCarcasseended' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-static-method-onCarcasseended' class='name expandable'>onCarcasseended</a>( <span class='pre'>fn, scope</span> )<strong class='chainable signature' >chainable</strong><strong class='private signature' >private</strong><strong class='static signature' >static</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Object<div class='sub-desc'>\n</div></li><li><span class='pre'>scope</span> : Object<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='static-method-override' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-static-method-override' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-static-method-override' class='name expandable'>override</a>( <span class='pre'>members</span> ) : <a href=\"#!/api/Carcasse.Base\" rel=\"Carcasse.Base\" class=\"docClass\">Carcasse.Base</a><strong class='chainable signature' >chainable</strong><strong class='deprecated signature' >deprecated</strong><strong class='static signature' >static</strong></div><div class='description'><div class='short'>Override members of this class. ...</div><div class='long'><p>Override members of this class. Overridden methods can be invoked via\n<a href=\"#!/api/Carcasse.Base-method-callParent\" rel=\"Carcasse.Base-method-callParent\" class=\"docClass\">callParent</a>.</p>\n\n<pre><code>Carcasse.define('My.Cat', {\n    constructor: function() {\n        alert(\"I'm a cat!\");\n    }\n});\n\nMy.Cat.override({\n    constructor: function() {\n        alert(\"I'm going to be a cat!\");\n\n        var instance = this.callParent(arguments);\n\n        alert(\"Meeeeoooowwww\");\n\n        return instance;\n    }\n});\n\nvar kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                          // alerts \"I'm a cat!\"\n                          // alerts \"Meeeeoooowwww\"\n</code></pre>\n\n<p>As of 2.1, direct use of this method is deprecated. Use Carcasse.define\ninstead:</p>\n\n<pre><code>Carcasse.define('My.CatOverride', {\n    override: 'My.Cat',\n\n    constructor: function() {\n        alert(\"I'm going to be a cat!\");\n\n        var instance = this.callParent(arguments);\n\n        alert(\"Meeeeoooowwww\");\n\n        return instance;\n    }\n});\n</code></pre>\n\n<p>The above accomplishes the same result but can be managed by the <a href=\"#!/api/Carcasse.Loader\" rel=\"Carcasse.Loader\" class=\"docClass\">Carcasse.Loader</a>\nwhich can properly order the override and its target class and the build process\ncan determine whether the override is needed based on the required state of the\ntarget class (My.Cat).</p>\n        <div class='signature-box deprecated'>\n        <p>This method has been <strong>deprecated</strong> since 2.1.0</p>\n        <p>Please use Carcasse.define instead</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>members</span> : Object<div class='sub-desc'><p>The properties to add to this class. This should be\nspecified as an object literal containing one or more properties.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Carcasse.Base\" rel=\"Carcasse.Base\" class=\"docClass\">Carcasse.Base</a></span><div class='sub-desc'><p>this class</p>\n</div></li></ul></div></div></div><div id='static-method-triggerCarcasseended' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.Base'>Carcasse.Base</span><br/><a href='source/Base.html#Carcasse-Base-static-method-triggerCarcasseended' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.Base-static-method-triggerCarcasseended' class='name expandable'>triggerCarcasseended</a>( <span class='pre'></span> )<strong class='private signature' >private</strong><strong class='static signature' >static</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div></div></div></div></div>"});