Ext.data.JsonP.Carcasse_JSON({"tagname":"class","name":"Carcasse.JSON","extends":null,"mixins":[],"alternateClassNames":[],"aliases":{},"singleton":true,"requires":[],"uses":[],"enum":null,"override":null,"inheritable":null,"inheritdoc":null,"meta":{},"private":null,"id":"class-Carcasse.JSON","members":{"cfg":[],"property":[],"method":[{"name":"decode","tagname":"method","owner":"Carcasse.JSON","meta":{},"id":"method-decode"},{"name":"encode","tagname":"method","owner":"Carcasse.JSON","meta":{},"id":"method-encode"},{"name":"encodeDate","tagname":"method","owner":"Carcasse.JSON","meta":{},"id":"method-encodeDate"}],"event":[],"css_var":[],"css_mixin":[]},"linenr":5,"files":[{"filename":"JSON.js","href":"JSON.html#Carcasse-JSON"}],"html_meta":{},"statics":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/JSON.html#Carcasse-JSON' target='_blank'>JSON.js</a></div></pre><div class='doc-contents'><p>Modified version of Douglas Crockford's json.js that doesn't\nmess with the Object prototype.\n<a href=\"http://www.json.org/js.html\">http://www.json.org/js.html</a></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-decode' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.JSON'>Carcasse.JSON</span><br/><a href='source/JSON.html#Carcasse-JSON-method-decode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.JSON-method-decode' class='name expandable'>decode</a>( <span class='pre'>json, [safe]</span> ) : Object/null</div><div class='description'><div class='short'>Decodes (parses) a JSON string to an object. ...</div><div class='long'><p>Decodes (parses) a JSON string to an object. If the JSON is invalid, this function throws a Error unless the safe option is set.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>json</span> : String<div class='sub-desc'><p>The JSON string.</p>\n\n</div></li><li><span class='pre'>safe</span> : Boolean (optional)<div class='sub-desc'><p>Whether to return <code>null</code> or throw an exception if the JSON is invalid.</p>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object/null</span><div class='sub-desc'><p>The resulting object.</p>\n\n</div></li></ul></div></div></div><div id='method-encode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.JSON'>Carcasse.JSON</span><br/><a href='source/JSON.html#Carcasse-JSON-method-encode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.JSON-method-encode' class='name expandable'>encode</a>( <span class='pre'>o</span> ) : String</div><div class='description'><div class='short'>Encodes an Object, Array or other value. ...</div><div class='long'><p>Encodes an Object, Array or other value.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object<div class='sub-desc'><p>The variable to encode.</p>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The JSON string.</p>\n\n</div></li></ul></div></div></div><div id='method-encodeDate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Carcasse.JSON'>Carcasse.JSON</span><br/><a href='source/JSON.html#Carcasse-JSON-method-encodeDate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Carcasse.JSON-method-encodeDate' class='name expandable'>encodeDate</a>( <span class='pre'>d</span> ) : String</div><div class='description'><div class='short'>Encodes a Date. ...</div><div class='long'><p>Encodes a Date. This returns the actual string which is inserted into the JSON string as the literal expression.\n<strong>The returned value includes enclosing double quotation marks.</strong></p>\n\n<p>The default return format is \"yyyy-mm-ddThh:mm:ss\".</p>\n\n<p>To override this:</p>\n\n<pre><code><a href=\"#!/api/Carcasse.JSON-method-encodeDate\" rel=\"Carcasse.JSON-method-encodeDate\" class=\"docClass\">Carcasse.JSON.encodeDate</a> = function(d) {\n    return Carcasse.Date.format(d, '\"Y-m-d\"');\n};\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>d</span> : Date<div class='sub-desc'><p>The Date to encode.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The string literal to use in a JSON string.</p>\n</div></li></ul></div></div></div></div></div></div></div>"});